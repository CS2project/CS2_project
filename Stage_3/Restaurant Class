import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Restaurant {
    private String name;
    private String address;
    private Menu menu;
    private List<Table> tables;
    private List<Staff> staffMembers;
    private List<Customer> customers;

    public Restaurant(String name, String address) {
        this.name = name;
        this.address = address;
        this.menu = new Menu();
        this.tables = new ArrayList<>();
        this.staffMembers = new ArrayList<>();
        this.customers = new ArrayList<>();
        initializeTables();
        initializeStaff();
        initializeMenu();
    }

    private void initializeTables() {
        tables.add(new Table(1, 4));
        tables.add(new Table(2, 2));
        tables.add(new Table(3, 6));
    }

    private void initializeStaff() {
        staffMembers.add(new Staff(1, "Tom", "Manager"));
    }

    private void initializeMenu() {
        menu.addItem(1, "Pancakes", 5.99, "Breakfast");
        menu.addItem(2, "Coffee", 2.99, "Beverage");
        menu.addItem(3, "Burger", 8.99, "Main Course");
    }

    public void start() {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("1. Staff Login");
            System.out.println("2. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine();

            if (choice == 1) {
                staffLogin(scanner);
            } else {
                break; // Exit the program
            }
        }
        scanner.close();
    }

    private void staffLogin(Scanner scanner) {
        System.out.print("Enter staff ID: ");
        int staffID = scanner.nextInt();
        scanner.nextLine();
        Staff staff = findStaffByID(staffID);

        if (staff != null) {
            System.out.println("Welcome, " + staff.getName());
            staffMenu(scanner, staff);
        } else {
            System.out.println("Invalid staff ID.");
        }
    }

    private void staffMenu(Scanner scanner, Staff staff) {
        while (true) {
            System.out.println("1. View Menu");
            System.out.println("2. Add Customer");
            System.out.println("3. Customer Login");
            System.out.println("4. Employee Stats");
            System.out.println("5. Table Status");
            System.out.println("6. Manage Menu");
            System.out.println("7. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    menu.printMenu();
                    break;
                case 2:
                    addCustomer(scanner);
                    break;
                case 3:
                    customerLogin(scanner);
                    break;
                case 4:
                    employeeStatsMenu(scanner, staff);
                    break;
                case 5:
                    viewTableStatus();
                    break;
                case 6:
                    manageMenu(scanner);
                    break;
                case 7:
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }

    private void addCustomer(Scanner scanner) {
        System.out.print("Enter customer ID: ");
        int customerId = scanner.nextInt();
        scanner.nextLine();
        System.out.print("Enter customer name: ");
        String name = scanner.nextLine();
        System.out.print("Enter customer email: ");
        String email = scanner.nextLine();
        System.out.print("Enter customer phone: ");
        String phone = scanner.nextLine();

        Customer newCustomer = new Customer(customerId, name, email, phone);
        customers.add(newCustomer);

        System.out.println("Customer added: " + newCustomer.getName());
    }

    private void customerLogin(Scanner scanner) {
        System.out.print("Enter customer ID: ");
        int customerID = scanner.nextInt();
        scanner.nextLine();
        Customer customer = findCustomerByID(customerID);

        if (customer != null) {
            System.out.println("Welcome, " + customer.getName());
            customerMenu(scanner, customer);
        } else {
            System.out.println("Invalid customer ID.");
        }
    }

    private void customerMenu(Scanner scanner, Customer customer) {
        Table assignedTable = null;

        while (true) {
            System.out.println("1. Dine In");
            System.out.println("2. To Go");
            System.out.println("3. Reservation");
            System.out.println("4. Order Food");
            System.out.println("5. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    assignedTable = dineIn(scanner, customer);
                    break;
                case 2:
                    toGoOrder(scanner, customer);
                    break;
                case 3:
                    assignedTable = makeReservation(scanner, customer);
                    break;
                case 4:
                    if (assignedTable != null) {
                        orderFood(scanner, customer, assignedTable);
                    } else {
                        System.out.println("No table assigned. Please dine in or reserve a table first.");
                    }
                    break;
                case 5:
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }

    private Table dineIn(Scanner scanner, Customer customer) {
        System.out.println("Select a table:");
        for (Table table : tables) {
            System.out.printf("Table ID: %d (Capacity: %d, Status: %s)%n", table.getTableID(), table.getCapacity(), table.getStatus());
        }
        System.out.print("Enter table ID: ");
        int tableID = scanner.nextInt();
        scanner.nextLine();
        Table selectedTable = findTableByID(tableID);

        if (selectedTable != null && selectedTable.checkAvailability()) {
            selectedTable.setOccupied(true);
            selectedTable.setCustomer(customer);
            System.out.println("Table " + tableID + " is reserved for you.");
            return selectedTable;
        } else {
            System.out.println("Table not available.");
            return null;
        }
    }

    private Table makeReservation(Scanner scanner, Customer customer) {
        System.out.println("Select a table for reservation:");
        for (Table table : tables) {
            System.out.printf("Table ID: %d (Capacity: %d, Status: %s)%n", table.getTableID(), table.getCapacity(), table.getStatus());
        }
        System.out.print("Enter table ID: ");
        int tableID = scanner.nextInt();
        scanner.nextLine();
        Table selectedTable = findTableByID(tableID);

        if (selectedTable != null && selectedTable.checkAvailability()) {
            selectedTable.setReserved(true);
            selectedTable.setCustomer(customer);
            System.out.println("Reservation made for Table " + tableID + " for customer " + customer.getName());
            return selectedTable;
        } else {
            System.out.println("Table not available.");
            return null;
        }
    }

    private void orderFood(Scanner scanner, Customer customer, Table assignedTable) {
        while (true) {
            System.out.println("Available Menu Items:");
            menu.printMenu();
            System.out.print("Enter item ID to order (or type 'done' to finish): ");
            String input = scanner.nextLine();

            if (input.equalsIgnoreCase("done")) {
                break;
            }

            try {
                int itemID = Integer.parseInt(input);
                Menu.MenuItem item = menu.getItem(itemID);
                if (item != null) {
                    customer.addPoints((int) item.getPrice());
                    customer.setLastOrder(new Order(item));
                    System.out.println("Ordered: " + item.getName());
                } else {
                    System.out.println("Invalid item ID.");
                }
            } catch (NumberFormatException e) {
                System.out.println("Invalid input.");
            }
        }


        assignedTable.setOccupied(false);
        assignedTable.setReserved(false);
        assignedTable.setCustomer(null);
        System.out.println("Thank you for your order! Your table is now available.");
    }

    private void toGoOrder(Scanner scanner, Customer customer) {
        orderFood(scanner, customer, null);
    }

    private void employeeStatsMenu(Scanner scanner, Staff staff) {
        System.out.println("Employee Role: " + staff.getRole());
        System.out.print("Enter hours worked: ");
        double hoursWorked = scanner.nextDouble();
        scanner.nextLine();
        Paycheck paycheck = new Paycheck(staff.getStaffID(), hoursWorked);
        System.out.println("Paycheck created for staff ID " + staff.getStaffID() + " with hours " + hoursWorked);
    }

    private void manageMenu(Scanner scanner) {
        while (true) {
            System.out.println("1. Add Menu Item");
            System.out.println("2. Remove Menu Item");
            System.out.println("3. Update Menu Item");
            System.out.println("4. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    addMenuItem(scanner);
                    break;
                case 2:
                    removeMenuItem(scanner);
                    break;
                case 3:
                    updateMenuItem(scanner);
                    break;
                case 4:
                    return;
                default:
                    System.out.println("Invalid choice.");
            }
        }
    }

    private void addMenuItem(Scanner scanner) {
        System.out.print("Enter item ID: ");
        int id = scanner.nextInt();
        scanner.nextLine();
        System.out.print("Enter item name: ");
        String name = scanner.nextLine();
        System.out.print("Enter item price: ");
        double price = scanner.nextDouble();
        scanner.nextLine();
        System.out.print("Enter item category: ");
        String category = scanner.nextLine();

        menu.addItem(id, name, price, category);
        System.out.println("Menu item added: " + name);
    }

    private void removeMenuItem(Scanner scanner) {
        System.out.print("Enter item ID to remove: ");
        int itemId = scanner.nextInt();
        scanner.nextLine();
        menu.removeItem(itemId);
    }

    private void updateMenuItem(Scanner scanner) {
        System.out.print("Enter item ID to update: ");
        int itemId = scanner.nextInt();
        scanner.nextLine();
        System.out.print("Enter new item name: ");
        String name = scanner.nextLine();
        System.out.print("Enter new item price: ");
        double price = scanner.nextDouble();
        scanner.nextLine();
        System.out.print("Enter new item category: ");
        String category = scanner.nextLine();

        menu.updateItem(itemId, name, price, category);
    }

    private void viewTableStatus() {
        System.out.println("Current Table Status:");
        for (Table table : tables) {
            System.out.printf("Table ID: %d (Status: %s)%n", table.getTableID(), table.getStatus());
        }
    }

    private Staff findStaffByID(int id) {
        for (Staff staff : staffMembers) {
            if (staff.getStaffID() == id) {
                return staff;
            }
        }
        return null;
    }

    private Customer findCustomerByID(int id) {
        for (Customer customer : customers) {
            if (customer.getCustomerID() == id) {
                return customer;
            }
        }
        return null;
    }

    private Table findTableByID(int id) {
        for (Table table : tables) {
            if (table.getTableID() == id) {
                return table;
            }
        }
        return null;
    }

    public static void main(String[] args) {
        Restaurant restaurant = new Restaurant("The Gourmet", "123 Food St.");
        restaurant.start();
    }
}
